import React, { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom"; // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏

const Enable2FA = () => {
  const [qrCode, setQrCode] = useState("");
  const [secret, setSecret] = useState("");
  const [code, setCode] = useState("");
  const [message, setMessage] = useState("");

  const navigate = useNavigate(); // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏

  useEffect(() => {
    const fetchQrCode = async () => {
      try {
        const accessToken = localStorage.getItem("accessToken"); // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ


        const response = await axios.get("http://localhost:8000/api/user/generate-2fa/", {
          headers: { Authorization: `Bearer ${accessToken}` },
        });

        setQrCode(response.data.qr_code_base64);
        setSecret(response.data.secret);

      } catch (err) {
        if (err.response && err.response.status === 401) {
          try {
            const refreshToken = localStorage.getItem("refreshToken");

            const refreshResponse = await axios.post("http://localhost:8000/api/token/refresh/", {
              refresh: refreshToken,
            });

            const newAccessToken = refreshResponse.data.access;
            localStorage.setItem("accessToken", newAccessToken); // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ


            const retryResponse = await axios.get("http://localhost:8000/api/user/generate-2fa/", {
              headers: { Authorization: `Bearer ${newAccessToken}` },
            });

            setQrCode(retryResponse.data.qr_code_base64);
            setSecret(retryResponse.data.secret);
          } catch (refreshError) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", refreshError);
            setMessage("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
          }
        } else {
          console.error(err);
          setMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞");
        }
      }
    };

    fetchQrCode();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const accessToken = localStorage.getItem("accessToken"); // ‚úÖ


      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ 2FA –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
      await axios.post(
        "http://localhost:8000/api/user/verify-2fa/",
        { code },
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const profileResponse = await axios.get("http://localhost:8000/api/user/profile/", {
        headers: { Authorization: `Bearer ${accessToken}` },
      });

      localStorage.setItem("userProfile", JSON.stringify(profileResponse.data));

      // üí° —Ç—É—Ç –º–æ–∂–µ—à—å –µ—â–µ –æ–±–Ω–æ–≤–∏—Ç—å is2FAEnabled, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –µ–≥–æ –∫–∞–∫ —Å—Ç–µ–π—Ç
      // setIs2FAEnabled(profileResponse.data.is_2fa_enabled);

      setMessage("‚úÖ 2FA —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞!");

      window.location.href = "/profile";


    } catch (err) {
      if (err.response && err.response.status === 401) {
        try {
          const refreshToken = localStorage.getItem("refreshToken");

          const refreshResponse = await axios.post("http://localhost:8000/api/token/refresh/", {
            refresh: refreshToken,
          });

          const newAccessToken = refreshResponse.data.access;
          localStorage.setItem("accessToken", newAccessToken); // ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω–æ


          await axios.post(
            "http://localhost:8000/api/user/verify-2fa/",
            { code },
            { headers: { Authorization: `Bearer ${newAccessToken}` } }
          );

          const profileResponse = await axios.get("http://localhost:8000/api/user/profile/", {
            headers: { Authorization: `Bearer ${newAccessToken}` },
          });

          localStorage.setItem("userProfile", JSON.stringify(profileResponse.data));

          // setIs2FAEnabled(profileResponse.data.is_2fa_enabled);

          setMessage("‚úÖ 2FA —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞!");
          setTimeout(() => navigate("/profile"), 1000);

        } catch (refreshError) {
          console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏", refreshError);
          setMessage("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
        }
      } else {
        console.error(err);
        setMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥");
      }
    }
  };


  return (
    <div style={{ padding: "2rem" }}>
      <h2>–í–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é</h2>

      {qrCode && (
        <div>
          <p>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ Google Authenticator:</p>
          <img src={qrCode} alt="QR Code" />
        </div>
      )}

      <form onSubmit={handleSubmit} style={{ marginTop: "1rem" }}>
        <label>
          –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
          <input
            type="text"
            value={code}
            onChange={(e) => setCode(e.target.value)}
            maxLength="6"
            required
          />
        </label>
        <button type="submit">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
      </form>

      {message && <p style={{ marginTop: "1rem" }}>{message}</p>}
    </div>
  );
};

export default Enable2FA;
